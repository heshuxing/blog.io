<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>离线修复CentOS7的OpenSSH</title>
      <link href="/2022/08/19/%E7%A6%BB%E7%BA%BF%E4%BF%AE%E5%A4%8DCentOS7%E7%9A%84OpenSSH/"/>
      <url>/2022/08/19/%E7%A6%BB%E7%BA%BF%E4%BF%AE%E5%A4%8DCentOS7%E7%9A%84OpenSSH/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx + Keepalived + LVS 的 DR 模式</title>
      <link href="/2022/08/17/Nginx-Keepalived-LVS%E7%9A%84DR%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/17/Nginx-Keepalived-LVS%E7%9A%84DR%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 8.0 用户管理</title>
      <link href="/2022/08/17/MySQL8-0%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
      <url>/2022/08/17/MySQL8-0%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-8-0-用户管理"><a href="#MySQL-8-0-用户管理" class="headerlink" title="MySQL 8.0 用户管理"></a>MySQL 8.0 用户管理</h1><h3 id="用户管理操作"><a href="#用户管理操作" class="headerlink" title="用户管理操作"></a>用户管理操作</h3><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;username&#x27;@&#x27;host&#x27; identified with mysql_native_password by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure><p>授权用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;username&#x27;@&#x27;host&#x27; with grant option;</span><br></pre></td></tr></table></figure><p>查看授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure><p>撤销授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke all privileges on *.* from &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;username&#x27;@&#x27;host&#x27; identified by &#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 配置初始化数据库</title>
      <link href="/2022/08/17/Docker%E9%85%8D%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/08/17/Docker%E9%85%8D%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-配置初始化数据库"><a href="#Docker-配置初始化数据库" class="headerlink" title="Docker 配置初始化数据库"></a>Docker 配置初始化数据库</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>Mysql 8.0.27</li><li>Mongo 4.4.10</li></ul><h2 id="初始化数据库方法"><a href="#初始化数据库方法" class="headerlink" title="初始化数据库方法"></a>初始化数据库方法</h2><ul><li>安装数据库客户端手动 source </li><li>自定义构建初始化镜像</li><li>使用官方提供 docker-entrypoint-initdb.d 入口初始化</li></ul><h2 id="MySQL-8-0-27"><a href="#MySQL-8-0-27" class="headerlink" title="MySQL 8.0.27"></a>MySQL 8.0.27</h2><h3 id="手动-source"><a href="#手动-source" class="headerlink" title="手动 source"></a>手动 source</h3><p>登录 mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u&#123;&#123; username &#125;&#125; -p&#123;&#123; password &#125;&#125; -P &#123;&#123; port &#125;&#125; -h &#123;&#123; host &#125;&#125;</span><br></pre></td></tr></table></figure><p>选择数据库初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use databases;</span><br><span class="line">source example.sql;</span><br></pre></td></tr></table></figure><h3 id="构建初始化镜像-参考"><a href="#构建初始化镜像-参考" class="headerlink" title="构建初始化镜像[参考]"></a>构建初始化镜像[参考]</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mysql/&#123;sql,image&#125;</span><br></pre></td></tr></table></figure><p>编写 init.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/mysql/sql/init.sql</span><br><span class="line"></span><br><span class="line">#####用户自定义######</span><br></pre></td></tr></table></figure><p>编写 Dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/mysql/image/Dockerfile</span><br><span class="line"></span><br><span class="line">FROM mysql:8.0.27</span><br><span class="line">WORKDIR /docker-entrypoint-initdb.d</span><br><span class="line">ENV LANG=C.UTF-8</span><br><span class="line">ADD ../sql/init.sql .</span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mysql:8.0</span><br></pre></td></tr></table></figure><p>启动镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0</span><br></pre></td></tr></table></figure><h3 id="entrypoint"><a href="#entrypoint" class="headerlink" title="entrypoint"></a>entrypoint</h3><p>官方说明：</p><p>当容器第一次启动时，将使用提供的配置变量创建和初始化具有指定名称的新数据库。此外，它将执行在 &#x2F;docker-entrypoint-initdb.d 中找到的扩展名为 .sh、.sql 和 .sql.gz 的文件。文件将按字母顺序执行。您可以通过将 SQL 转储装载到该目录中并提供带有贡献数据的自定义图像来轻松填充您的 mysql 服务。默认情况下，SQL 文件将导入由 MYSQL_DATABASE 变量指定的数据库</p><h4 id="初始化准备"><a href="#初始化准备" class="headerlink" title="初始化准备"></a>初始化准备</h4><p>创建 sql 存放目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mysql/sql</span><br></pre></td></tr></table></figure><p>编写初始化 sql</p><p>a_createUser.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;username&#x27;@&#x27;host&#x27; identified by &#x27;password&#x27;;</span><br><span class="line">grant all privileges on *.* to &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure><p>db_createDatabase.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS `database_name`;</span><br><span class="line">CREATE DATABASE database_name DEFAULT CHARACTER SET utf8mb4;</span><br></pre></td></tr></table></figure><p>c_createTables.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 所需 sql ####</span><br></pre></td></tr></table></figure><h4 id="启动并初始化-MySQL"><a href="#启动并初始化-MySQL" class="headerlink" title="启动并初始化 MySQL"></a>启动并初始化 MySQL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  --name msyql \</span><br><span class="line">  --network host \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=password \</span><br><span class="line">  -v /opt/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">  -v /opt/mysql/sql/a_createUser.sql:/docker-entrypoint-initdb.d/a_createUser.sql \</span><br><span class="line">  -v /opt/mysql/sql/b_createDatabase.sql:/docker-entrypoint-initdb.d/b_createDatabase.sql \</span><br><span class="line">  -v /opt/mysql/sql/c_createTables.sql:/docker-entrypoint-initdb.d/c_createTables.sql \</span><br><span class="line">  -it mysql:8.0.27</span><br></pre></td></tr></table></figure><h2 id="Mongo-4-4-10"><a href="#Mongo-4-4-10" class="headerlink" title="Mongo 4.4.10"></a>Mongo 4.4.10</h2><h3 id="构建初始化镜像"><a href="#构建初始化镜像" class="headerlink" title="构建初始化镜像"></a>构建初始化镜像</h3><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p>创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mongodb/js</span><br></pre></td></tr></table></figure><p>编写 init.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/mongodb/js/init.js</span><br><span class="line"></span><br><span class="line">admin = db.getSiblingDB(&#x27;admin&#x27;);</span><br><span class="line">admin.dropUser(&quot;&#123;&#123; username &#125;&#125;&quot;, &#123;w: &quot;majority&quot;, wtimeout: 5000&#125;);</span><br><span class="line">admin.createUser(&#123;</span><br><span class="line">    user: &quot;&#123;&#123; username &#125;&#125;&quot;,</span><br><span class="line">    pwd: &quot;&#123;&#123; password &#125;&#125;&quot;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编写 docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/mongodb/js/docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: &quot;3.1&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">    mongo:</span><br><span class="line">        image: mongo</span><br><span class="line">        restart: always</span><br><span class="line">        environment:</span><br><span class="line">            MONGO_INITDB_ROOT_USERNAME: database_name</span><br><span class="line">            MONGO_INITDB_ROOT_PASSWORD: database_password</span><br><span class="line">        volumes:</span><br><span class="line">            - ./init.js:/docker-entrypoint-initdb.d/mongo_init.js</span><br><span class="line">            - ./mongo-data:/data/db</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;27017:27017&quot;</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="entrypoint-1"><a href="#entrypoint-1" class="headerlink" title="entrypoint"></a>entrypoint</h3><p>官方说明：</p><p>当容器第一次启动时，它将执行扩展名为 .sh 和 .js 的文件，这些文件位于 &#x2F;docker-entrypoint-initdb.d 中。文件将按字母顺序执行。 .js 文件将由 mongo 使用 MONGO_INITDB_DATABASE 变量指定的数据库（如果存在）执行，否则进行测试。您还可以在 .js 脚本中切换数据库</p><p>初始化准备</p><p>创建 js 存放目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mongodb/js</span><br></pre></td></tr></table></figure><p>编写初始化 js</p><p>a_createUser.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">admin = db.getSiblingDB(&#x27;admin&#x27;);</span><br><span class="line">admin.dropUser(&quot;&#123;&#123; username &#125;&#125;&quot;, &#123;w: &quot;majority&quot;, wtimeout: 5000&#125;);</span><br><span class="line">admin.createUser(&#123;</span><br><span class="line">    user: &quot;&#123;&#123; username &#125;&#125;&quot;,</span><br><span class="line">    pwd: &quot;&#123;&#123; password &#125;&#125;&quot;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>启动并初始化 Mongo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mongodb \</span><br><span class="line">  --network host \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  -v /opt/mongodb/conf/mongod.conf:/etc/mongo/mongod.conf \</span><br><span class="line">  -v /opt/mongodb/js/a_createUser.js:/docker-entrypoint-initdb.d/a_createUser.js \</span><br><span class="line">  -d mongo:4.4.10 --config /etc/mongo/mongod.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署配置 MongoDB 4.4.10 单机版</title>
      <link href="/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AEMongoDB4-4-10%E5%8D%95%E6%9C%BA%E7%89%88/"/>
      <url>/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AEMongoDB4-4-10%E5%8D%95%E6%9C%BA%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-部署配置-Mongo-4-4-10-单机版"><a href="#Docker-部署配置-Mongo-4-4-10-单机版" class="headerlink" title="Docker 部署配置 Mongo 4.4.10 单机版"></a>Docker 部署配置 Mongo 4.4.10 单机版</h1><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul><li><p>CentOS 7.4</p></li><li><p>Docker 19.03.9</p></li><li><p>Mongo 4.4.10</p></li></ul><h2 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h2><h3 id="状态检查"><a href="#状态检查" class="headerlink" title="状态检查"></a>状态检查</h3><p>检查 Docker 运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep docker</span><br></pre></td></tr></table></figure><p>检查端口号占用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp | grep 27017</span><br></pre></td></tr></table></figure><p>检查防火墙状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>检查 selinux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenforce</span><br></pre></td></tr></table></figure><p>密码准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkpasswd -s 0</span><br></pre></td></tr></table></figure><p>目录规划</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mongodb/&#123;conf,data&#125;</span><br></pre></td></tr></table></figure><h2 id="实操具体步骤"><a href="#实操具体步骤" class="headerlink" title="实操具体步骤"></a>实操具体步骤</h2><ul><li>在线部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:4.4.10</span><br></pre></td></tr></table></figure><ul><li>离线部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip -c mongo.tar.gz | docker load</span><br></pre></td></tr></table></figure><p>准备 mongo 配置文件 mongod.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">  dbPath: /data/db</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod.log</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 127.0.0.1</span><br><span class="line">processManagement:</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br></pre></td></tr></table></figure><p>创建 mongo 镜像并启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  --name mongodb \</span><br><span class="line">  --restart always \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  -v /opt/mongodb/conf/mongod.conf:/etc/mongo/mongod.conf \</span><br><span class="line">  -v /opt/mongodb/data:/data/db \</span><br><span class="line">  -d mongo:4.4.10 --config /etc/mongo/mongod.conf</span><br></pre></td></tr></table></figure><p>说明：</p><p>–config &#x2F;etc&#x2F;mongo&#x2F;mongod.conf # 指定配置文件启动%                    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装配置 MongoDB 副本集</title>
      <link href="/2022/08/17/Docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
      <url>/2022/08/17/Docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>Docker 安装配置 MongoDB 副本集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name mongod-rs3 \</span><br><span class="line">--restart on-failure:3 \</span><br><span class="line">--network host \</span><br><span class="line">-p 27017:27017 \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /opt/wshop/wshop-1.0.0/conf/mongodb/mongod-rs3/mongod.conf:/etc/mongo/mongod.conf \</span><br><span class="line">-v /opt/wshop/wshop-1.0.0/data/mongodb:/data/db \</span><br><span class="line">-v /opt/wshop/wshop-1.0.0/conf/mongodb/mongod-key:/data/key \</span><br><span class="line">-d mongo:4.4.10-focal \</span><br><span class="line">--config /etc/mongo/mongod.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var config=&#123;</span><br><span class="line">  _id:&quot;mongo-rs&quot;,</span><br><span class="line">  members:[</span><br><span class="line">    &#123;_id:0,host:&quot;192.168.72.101:27017&quot;&#125;,</span><br><span class="line">    &#123;_id:1,host:&quot;192.168.72.102:27017&quot;&#125;,</span><br><span class="line">    &#123;_id:2,host:&quot;192.168.72.103:27017&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line">rs.initiate(config);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use admin;</span><br><span class="line">db.dropUser(&quot;admin&quot;, &#123;w: &quot;majority&quot;, wtimeout: 5000&#125;);</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: &quot;admin&quot;,</span><br><span class="line">    pwd: &quot;niQ7eguF1&quot;,</span><br><span class="line">    roles: [</span><br><span class="line">      &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装配置 Jenkins 海洋版</title>
      <link href="/2022/08/17/Docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJenkins%E6%B5%B7%E6%B4%8B%E7%89%88/"/>
      <url>/2022/08/17/Docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEJenkins%E6%B5%B7%E6%B4%8B%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装配置-Jenkins-海洋版"><a href="#Docker-安装配置-Jenkins-海洋版" class="headerlink" title="Docker 安装配置 Jenkins 海洋版"></a>Docker 安装配置 Jenkins 海洋版</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Docker 19.03.9</li><li>Jenkins  1.25.2</li></ul><h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h2><p>创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/jenkins</span><br></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkinsci/blueocean:1.25.2</span><br></pre></td></tr></table></figure><p>创建并启动 Jenkins 容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name jenkins \</span><br><span class="line">  -u root \</span><br><span class="line">  -p 8090:8080 \</span><br><span class="line">  -p 50000:50000 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -v /opt/jenkins:/var/jenkins_home \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -d jenkinsci/blueocean</span><br></pre></td></tr></table></figure><h2 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h2><h3 id="apk-安装方式"><a href="#apk-安装方式" class="headerlink" title="apk 安装方式"></a>apk 安装方式</h3><p>说明：Jenkins BlueoceanDocker 镜像基于 Alpine Linux，而 Alpine 使用 apk 作为软件包管理器&#x2F;安装程序，所以可以运行此程序安装 Maven</p><p>使用超级用户访问容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec --user root -it jenkins bash</span><br></pre></td></tr></table></figure><p>安装 Maven</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache maven</span><br></pre></td></tr></table></figure><h3 id="Maven-容器代理方式"><a href="#Maven-容器代理方式" class="headerlink" title="Maven 容器代理方式"></a>Maven 容器代理方式</h3><p>编辑另一种更好的方法是按照教程文档中的建议，使用单独的maven docker容器作为Jenkins代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        docker &#123;</span><br><span class="line">            image &#x27;maven:3-alpine&#x27;</span><br><span class="line">            args &#x27;-v /root/.m2:/root/.m2&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &#x27;mvn -B -DskipTests clean package&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-Node-js"><a href="#配置-Node-js" class="headerlink" title="配置 Node.js"></a>配置 Node.js</h2><h3 id="apk-安装方式-1"><a href="#apk-安装方式-1" class="headerlink" title="apk 安装方式"></a>apk 安装方式</h3><p>使用超级用户访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec --user root -it jenkins bash</span><br></pre></td></tr></table></figure><p>apk 安装 Node.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache nodejs</span><br></pre></td></tr></table></figure><p>apk 安装 npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache npm</span><br></pre></td></tr></table></figure><p>Node.js 容器代理方式</p><p>参考链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jenkins.io/zh/doc/tutorials/build-a-node-js-and-react-app-with-npm/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署配置 Redis 三主三从集群</title>
      <link href="/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AERedis%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E%E9%9B%86%E7%BE%A4/"/>
      <url>/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AERedis%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-配置部署-Redis-三主三从集群"><a href="#Docker-配置部署-Redis-三主三从集群" class="headerlink" title="Docker 配置部署 Redis 三主三从集群"></a>Docker 配置部署 Redis 三主三从集群</h1><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul><li>Docker 20.10.11</li><li>Redis  5.0.14</li></ul><h2 id="Reids-集群规划"><a href="#Reids-集群规划" class="headerlink" title="Reids 集群规划"></a>Reids 集群规划</h2><table><thead><tr><th>服务器IP</th><th>节点</th><th>端口</th><th>配置目录挂载</th><th>数据目录挂载</th></tr></thead><tbody><tr><td>192.168.72.101</td><td>redis-master01<br />redis-slave04</td><td>7001<br />7004</td><td>&#x2F;opt&#x2F;redis&#x2F;conf&#x2F;7001&#x2F;redis.conf<br />&#x2F;opt&#x2F;redis&#x2F;conf&#x2F;7004&#x2F;redis.conf</td><td>&#x2F;opt&#x2F;redis&#x2F;data&#x2F;7001<br />&#x2F;opt&#x2F;redis&#x2F;data&#x2F;7004</td></tr><tr><td>192.168.72.102</td><td>redis-master02<br />redis-slave05</td><td>7002<br />7005</td><td>&#x2F;opt&#x2F;redis&#x2F;conf&#x2F;7002&#x2F;redis.conf<br />&#x2F;opt&#x2F;redis&#x2F;conf&#x2F;7005&#x2F;redis.conf</td><td>&#x2F;opt&#x2F;redis&#x2F;data&#x2F;7002<br />&#x2F;opt&#x2F;redis&#x2F;data&#x2F;7005</td></tr><tr><td>192.168.72.103</td><td>redis-master03<br />redis-slave06</td><td>7003<br />7006</td><td>&#x2F;opt&#x2F;redis&#x2F;conf&#x2F;7003&#x2F;redis.conf<br />&#x2F;opt&#x2F;redis&#x2F;conf&#x2F;7006&#x2F;redis.conf</td><td>&#x2F;opt&#x2F;redis&#x2F;data&#x2F;7003<br />&#x2F;opt&#x2F;redis&#x2F;data&#x2F;7006</td></tr></tbody></table><h2 id="实操步骤"><a href="#实操步骤" class="headerlink" title="实操步骤"></a>实操步骤</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>第一台 192.168.72.101</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/redis/&#123;conf,data&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis/conf &amp;&amp; mkdir &#123;7001,7004&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis/data &amp;&amp; mkdir &#123;7001,7004&#125;</span><br></pre></td></tr></table></figure><p>第二台 192.168.72.102</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/redis/&#123;conf,data&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis/conf &amp;&amp; mkdir &#123;7002,7005&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis/data &amp;&amp; mkdir &#123;7002,7005&#125;</span><br></pre></td></tr></table></figure><p>第三台 192.168.72.103</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/redis/&#123;conf,data&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis/conf &amp;&amp; mkdir &#123;7003,7006&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis/data &amp;&amp; mkdir &#123;7003,7006&#125;</span><br></pre></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>第一台 192.168.72.101</p><p>redis-master01</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /opt/redis/conf/7001/redis.conf &lt;&lt; EOF</span><br><span class="line">port 7001</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile  /data/redis.pid</span><br><span class="line">maxmemory 1gb</span><br><span class="line">requirepass 43vctWRum</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>redis-slave01</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /opt/redis/conf/7004/redis.conf &lt;&lt; EOF</span><br><span class="line">port 7004</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile  /data/redis.pid</span><br><span class="line">maxmemory 1gb</span><br><span class="line">requirepass 43vctWRum</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>第二台 192.168.72.102</p><p>redis-master02</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /opt/redis/conf/7002/redis.conf &lt;&lt; EOF</span><br><span class="line">port 7002</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile  /data/redis.pid</span><br><span class="line">maxmemory 1gb</span><br><span class="line">requirepass 43vctWRum</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>redis-slave05</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /opt/redis/conf/7005/redis.conf &lt;&lt; EOF</span><br><span class="line">port 7005</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile  /data/redis.pid</span><br><span class="line">maxmemory 1gb</span><br><span class="line">requirepass 43vctWRum</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>第三台 192.168.72.103</p><p>redis-master03</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /opt/redis/conf/7003/redis.conf &lt;&lt; EOF</span><br><span class="line">port 7003</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile  /data/redis.pid</span><br><span class="line">maxmemory 1gb</span><br><span class="line">requirepass 43vctWRum</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>redis-slave06</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /opt/redis/conf/7006/redis.conf &lt;&lt; EOF</span><br><span class="line">port 700</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile  /data/redis.pid</span><br><span class="line">maxmemory 1gb</span><br><span class="line">requirepass 43vctWRum</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="拉取-Redis-镜像"><a href="#拉取-Redis-镜像" class="headerlink" title="拉取 Redis 镜像"></a>拉取 Redis 镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0.14</span><br></pre></td></tr></table></figure><h3 id="创建并运行-Redis-容器"><a href="#创建并运行-Redis-容器" class="headerlink" title="创建并运行 Redis 容器"></a>创建并运行 Redis 容器</h3><p>以第一台 192.168.72.101 为例创建 redis-master01</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  --name redis-master01 \</span><br><span class="line">  --network host \</span><br><span class="line">  --restart on-failure:3 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  -v /opt/wshop/wshop-1.0.0/conf/redis/redis-7001/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line">  -v /opt/wshop/wshop-1.0.0/data/redis/redis-7001:/data \</span><br><span class="line">  -it redis:5.0.14-bullseye redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>以第一台 192.168.72.101 为例创建 redis-slave04</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  --name redis-slave04 \</span><br><span class="line">  --network host \</span><br><span class="line">  --restart on-failure:3 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  -v /opt/wshop/wshop-1.0.0/conf/redis/redis-7004/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line">  -v /opt/wshop/wshop-1.0.0/data/redis/redis-7004:/data \</span><br><span class="line">  -it redis:5.0.14-bullseye redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h3 id="创建-Redis-集群"><a href="#创建-Redis-集群" class="headerlink" title="创建 Redis 集群"></a>创建 Redis 集群</h3><p>以第一台 192.168.72.101 为例创建 Redis 三主三从集群</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis-master01 \</span><br><span class="line">redis-cli -p 7001 -a 43vctWRum --cluster create \</span><br><span class="line">192.168.72.101:7001 192.168.72.102:7002 192.168.72.103:7003 \</span><br><span class="line">192.168.72.101:7004 192.168.72.102:7005 192.168.72.103:7006 \</span><br><span class="line">--cluster-replicas 1</span><br></pre></td></tr></table></figure><p>出现以下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.72.102:7005 to 192.168.72.101:7001</span><br><span class="line">Adding replica 192.168.72.103:7006 to 192.168.72.102:7002</span><br><span class="line">Adding replica 192.168.72.101:7004 to 192.168.72.103:7003</span><br><span class="line">M: e28983a6810be189adb529c3d7f636faff5ca7db 192.168.72.101:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: ee0f88fb5855ec4ec631f23867d03f88ad2b4f44 192.168.72.102:7002</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: fa22aa8233ac38dbd8778d3e29d426d281ae1134 192.168.72.103:7003</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: f063e1eb8712aea1f4e8808d7cbd344456ad1f77 192.168.72.101:7004</span><br><span class="line">   replicates fa22aa8233ac38dbd8778d3e29d426d281ae1134</span><br><span class="line">S: 7a902ca31c830967ae529707469a8644cb6ecd8f 192.168.72.102:7005</span><br><span class="line">   replicates e28983a6810be189adb529c3d7f636faff5ca7db</span><br><span class="line">S: ed6d96445efd11718fc52484207b2b6fcbb1ff9c 192.168.72.103:7006</span><br><span class="line">   replicates ee0f88fb5855ec4ec631f23867d03f88ad2b4f44</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.72.101:7001)</span><br><span class="line">M: e28983a6810be189adb529c3d7f636faff5ca7db 192.168.72.101:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: fa22aa8233ac38dbd8778d3e29d426d281ae1134 192.168.72.103:7003</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: ed6d96445efd11718fc52484207b2b6fcbb1ff9c 192.168.72.103:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ee0f88fb5855ec4ec631f23867d03f88ad2b4f44</span><br><span class="line">M: ee0f88fb5855ec4ec631f23867d03f88ad2b4f44 192.168.72.102:7002</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: f063e1eb8712aea1f4e8808d7cbd344456ad1f77 192.168.72.101:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fa22aa8233ac38dbd8778d3e29d426d281ae1134</span><br><span class="line">S: 7a902ca31c830967ae529707469a8644cb6ecd8f 192.168.72.102:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e28983a6810be189adb529c3d7f636faff5ca7db</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p>进入 Redis 容器查看集群信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis-master01 redis-cli -p 7001 -a 43vctWRum -c</span><br></pre></td></tr></table></figure><p>出现以下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7001&gt; cluster nodes</span><br><span class="line">fa22aa8233ac38dbd8778d3e29d426d281ae1134 192.168.72.103:7003@17003 master - 0 1638276842000 3 connected 10923-16383</span><br><span class="line">e28983a6810be189adb529c3d7f636faff5ca7db 192.168.72.101:7001@17001 myself,master - 0 1638276841000 1 connected 0-5460</span><br><span class="line">ed6d96445efd11718fc52484207b2b6fcbb1ff9c 192.168.72.103:7006@17006 slave ee0f88fb5855ec4ec631f23867d03f88ad2b4f44 0 1638276841000 6 connected</span><br><span class="line">ee0f88fb5855ec4ec631f23867d03f88ad2b4f44 192.168.72.102:7002@17002 master - 0 1638276842000 2 connected 5461-10922</span><br><span class="line">f063e1eb8712aea1f4e8808d7cbd344456ad1f77 192.168.72.101:7004@17004 slave fa22aa8233ac38dbd8778d3e29d426d281ae1134 0 1638276842958 4 connected</span><br><span class="line">7a902ca31c830967ae529707469a8644cb6ecd8f 192.168.72.102:7005@17005 slave e28983a6810be189adb529c3d7f636faff5ca7db 0 1638276841000 5 connected</span><br></pre></td></tr></table></figure><p>集群部署成功%                                                      </p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署配置 Redis 5.0.14 单机版</title>
      <link href="/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AERedis5-0-14%E5%8D%95%E6%9C%BA%E7%89%88/"/>
      <url>/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AERedis5-0-14%E5%8D%95%E6%9C%BA%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-部署配置-Redis-5-0-14-单机版"><a href="#Docker-部署配置-Redis-5-0-14-单机版" class="headerlink" title="Docker 部署配置 Redis 5.0.14 单机版"></a>Docker 部署配置 Redis 5.0.14 单机版</h1><h2 id="安装部署环境"><a href="#安装部署环境" class="headerlink" title="安装部署环境"></a>安装部署环境</h2><ul><li><p>CentOS 7.4</p></li><li><p>Docker 19</p></li><li><p>Redis 5.0.14</p></li></ul><h2 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h2><h3 id="状态检查"><a href="#状态检查" class="headerlink" title="状态检查"></a>状态检查</h3><p>检查 Docker 运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep docker</span><br></pre></td></tr></table></figure><p>检查端口运行情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp | grep 6379</span><br></pre></td></tr></table></figure><p>检查防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>检查 selinux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenfores</span><br></pre></td></tr></table></figure><p>密码准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkpasswd -s 0</span><br></pre></td></tr></table></figure><h3 id="目录规划"><a href="#目录规划" class="headerlink" title="目录规划"></a>目录规划</h3><p>说明：</p><p>Docker容器原则上是短暂的，如果容器被删除或损坏，任何数据或配置都将丢失。因此，我们需要将 Docker 内的 MySQL 数据文件以及配置文件转移到宿主机的指定路径</p><p>宿主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/redis/&#123;conf,data&#125;</span><br></pre></td></tr></table></figure><h2 id="实操具体步骤"><a href="#实操具体步骤" class="headerlink" title="实操具体步骤"></a>实操具体步骤</h2><ul><li>在线部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0.14</span><br></pre></td></tr></table></figure><ul><li>离线部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; redis.tar.gz</span><br></pre></td></tr></table></figure><p>准备配置文件</p><p>说明：Redis 镜像不包含 redis.conf 配置文件，需要自行去 Redis 官网找到对应版本下载 redis.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line">maxmemory 2gb</span><br><span class="line">maxmemory-policy volatile-lru</span><br><span class="line">appendonly yes</span><br><span class="line">daemonize no</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>daemonize  # 关闭守护线程</p><p>appendonly  # 启动持久化</p><p>创建并启动 Redis </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --restart always \</span><br><span class="line">  --name redis \</span><br><span class="line">  --network host \</span><br><span class="line">  -p 6379:6379 \</span><br><span class="line">  -v /opt/redis/data:/data \</span><br><span class="line">  -v /opt/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line">  -d redis:5.0.14 redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>说明：</p><p>redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf # 指定配置文件启动</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署配置 MySQL 8.0.27 单机版</title>
      <link href="/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AEMySQL8-0-27%E5%8D%95%E6%9C%BA%E7%89%88/"/>
      <url>/2022/08/17/Docker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AEMySQL8-0-27%E5%8D%95%E6%9C%BA%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-部署配置-MySQL-8-0-27-单机版"><a href="#Docker-部署配置-MySQL-8-0-27-单机版" class="headerlink" title="Docker 部署配置 MySQL 8.0.27 单机版"></a>Docker 部署配置 MySQL 8.0.27 单机版</h1><h2 id="安装部署环境"><a href="#安装部署环境" class="headerlink" title="安装部署环境"></a>安装部署环境</h2><ul><li>CentOS  7.4</li><li>Docker  19.03.9</li><li>MySQL  8.0.27</li></ul><h2 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h2><h3 id="状态检查"><a href="#状态检查" class="headerlink" title="状态检查"></a>状态检查</h3><p>检查 Docker 运行状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>检查端口号占用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp | grep 3306</span><br></pre></td></tr></table></figure><p>检查防火墙状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>检查 selinux 状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenforce</span><br></pre></td></tr></table></figure><h3 id="密码准备"><a href="#密码准备" class="headerlink" title="密码准备"></a>密码准备</h3><p>准备 MySQL8.0 登录密码（推荐 mkpasswd）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkpasswd -s 0</span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l # 指定密码长度，默认为 7 位数</span><br><span class="line">-d # 指定密码中数字最少位数，默认是 2 位</span><br><span class="line">-c # 指定密码中小写字母最少位数，默认是 2 位</span><br><span class="line">-C # 指定密码中大写字母最少位数，默认是 2 位</span><br><span class="line">-s # 指定密码中特殊字符最少位数，默认是 1 位</span><br></pre></td></tr></table></figure><h3 id="目录规划"><a href="#目录规划" class="headerlink" title="目录规划"></a>目录规划</h3><p>说明：</p><p>Docker容器原则上是短暂的，如果容器被删除或损坏，任何数据或配置都将丢失。因此，我们需要将 Docker 内的 MySQL 数据文件以及配置文件转移到宿主机的指定路径</p><p>宿主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/mysql/conf # MySQL 配置目录</span><br><span class="line">mkdir -p /opt/mysql/data # MySQL 数据目录</span><br></pre></td></tr></table></figure><h2 id="实操具体步骤"><a href="#实操具体步骤" class="headerlink" title="实操具体步骤"></a>实操具体步骤</h2><ul><li>在线部署：</li></ul><p>获取 MySQL 8.0 镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure><ul><li>离线部署：</li></ul><p>导入 MySQL 8.0 镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; mysql.tar.gz</span><br></pre></td></tr></table></figure><p>创建镜像用于拷贝配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=oNdw35Sjb -it mysql:8.0</span><br></pre></td></tr></table></figure><p>查看容器进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure><p>查找配置文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --help | grep my.cnf</span><br></pre></td></tr></table></figure><p>退出容器拷贝配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mysql:/etc/mysql /opt/mysql/conf</span><br></pre></td></tr></table></figure><p>查找数据文件位置</p><p>用于在宿主机上运行<strong>docker inspect</strong>命令的JSON输出，提供了有关数据目录卷的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker inspect mysql</span><br><span class="line"></span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;05a6c95216b1ceb692abd7d7f82c5662e83309a46e2abb9304b9ce51307cb94b&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/05a6c95216b1ceb692abd7d7f82c5662e83309a46e2abb9304b9ce51307cb94b/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/var/lib/mysql&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><p>输出显示源文件夹：&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes，表示已安装在 &#x2F;var&#x2F;lib&#x2F;mysql 容器内的服务器数据目录中。</p><p>停止容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop mysql</span><br></pre></td></tr></table></figure><p>删除容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm mysql</span><br></pre></td></tr></table></figure><p>创建正式 MySQL 8.0 容器挂载配置和数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">    --name mysql \</span><br><span class="line">    --restart on-failure:3 \</span><br><span class="line">    --network host \</span><br><span class="line">    -p 3306:3306 \</span><br><span class="line">    -v /opt/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">    -v /opt/mysql/data:/var/lib/mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=oNdw35Sjb</span><br><span class="line">    -it mysql:8.0</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>-dit  # 后台运行</p><p>–restart on-failure:3 # docker 重启策略，非 0 时重启3次 </p><h2 id="配置-MySQL-8-0"><a href="#配置-MySQL-8-0" class="headerlink" title="配置 MySQL 8.0"></a>配置 MySQL 8.0</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>宿主机修改 my.cnf 配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">secure-file-priv= NULL</span><br><span class="line"></span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">#######添加自定义配置##########</span><br><span class="line">max_connections = 512</span><br><span class="line">default-authentication-plugin = mysql_native_password</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">slow_query_log=on</span><br><span class="line">slow_query_log_file=/var/log/slow-query.log</span><br><span class="line"></span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>lower_case_table_names&#x3D;1  # 开启大小写不敏感</p><h3 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h3><p>说明：</p><p>安全起见，原则上不允许 root 用户远程访问</p><p>MySQL 8有新的安全要求，不能像之前的版本那样一次性创建用户并授权需要先创建用户，再进行授权操作</p><p>进入容器登录 MySQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -poNdw35Sjb</span><br></pre></td></tr></table></figure><p>查看数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user &#x27;username&#x27;@&#x27;host&#x27; identified by &#x27;password&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>username：自定义用户名</p><p>host：登录域名，为 % 时表示任意 IP 可访问，即远程登录；为 localhost 时表示本机，或填写指定 IP 地址访问</p><p>password：自定义密码</p><p>用户授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &#x27;username&#x27;@&#x27;host&#x27; with grant option;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>all：所有权限</p><p>第一个 * ：表示数据库，也可指定数据库名</p><p>第二个 * ：表示数据表，也可指定数据表名</p><p>with gran option：表示该用户可给其它用户赋予权限，但不可能超过该用户已有的权限</p><p>授权后刷新权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="navicat-连接时报-2059-错误"><a href="#navicat-连接时报-2059-错误" class="headerlink" title="navicat 连接时报 2059 错误"></a>navicat 连接时报 2059 错误</h3><p>Mysql8.0默认采用caching-sha2-password加密，目前好多客户端不支持，可改为mysql_native_password;</p><p>使用 mysql 数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><p>查询信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select Host,User,plugin from user;</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| Host      | User             | plugin                |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| %         | username         | caching_sha2_password |</span><br><span class="line">| localhost | root             | caching_sha2_password |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br></pre></td></tr></table></figure><p>执行修改命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;username&#x27;@&#x27;host&#x27; identified with mysql_native_password by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure><p>成功后查询如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select Host,User,plugin from user;</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| Host      | User             | plugin                |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| %         | username         | mysql_native_password |</span><br><span class="line">| localhost | root             | caching_sha2_password |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
